# Define the user nginx will run as
user nginx;

# Auto-detect number of CPU cores
worker_processes auto;

# Error log location
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Event configuration
events {
    worker_connections 1024;
}

# HTTP server configuration
http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging settings
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Gzip settings
    gzip on;
    gzip_disable "msie6";
    
    # Server block for the reverse proxy
    server {
        listen 80;
        
        # Enable large request bodies for LLM requests
        client_max_body_size 10M;
        
        # Increase timeouts for long-running requests
        proxy_connect_timeout 300s;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;

        location = /v1/model/info {
            # This location is used for model info requests
            # Forward to LiteLLM server
            proxy_pass http://127.0.0.1:4000/v1/model/info;
            # Pass the original host header
            proxy_set_header Host $host;
            # Preserve original headers
            proxy_pass_request_headers on;
        }


        # Location for the API with tenant/client_id pattern
        location ~ ^/([^/]+)/([^/]+)/(.*)$ {
            # Extract tenant and client_id from URL
            set $tenant $1;
            set $client_id $2;
            set $forward_path $3;
            
            # Forward to LiteLLM server
            proxy_pass http://127.0.0.1:4000/$forward_path;
            
            # Pass the original host header
            proxy_set_header Host $host;
            
            # Preserve original headers
            proxy_pass_request_headers on;
            
            # Pass client IP
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Pass the tenant and client_id as headers
            proxy_set_header FLOW_TENANT $tenant;
            proxy_set_header FLOW_CLIENT_ID $client_id;
            
            # Extract and forward the client secret from Authorization header
            # Remove "Bearer " prefix if present
            if ($http_authorization ~ "^Bearer (.+)$") {
                set $client_secret $1;
            }
            
            # If no Bearer prefix, use the whole header
            if ($client_secret = "") {
                set $client_secret $http_authorization;
            }
            
            proxy_set_header FLOW_CLIENT_SECRET $client_secret;
            
            # Enable streaming
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_buffering off;
            proxy_cache off;
        }
        
        # Health check endpoint
        location /health {
            return 200 '{"status":"healthy"}';
            add_header Content-Type application/json;
        }
    }
}